generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  phone         String?
  address       String?
  role          Role      @default(USER)
  isVerified    Boolean   @default(false)
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  orders        Order[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Game {
  id               String     @id @default(cuid())
  name             String
  slug             String     @unique
  description      String?
  shortDescription String?
  icon             String?
  banner           String?
  bannerTitle      String?
  bannerSubtitle   String?
  developerName    String?
  isPopular        Boolean    @default(false)
  isFeatured       Boolean    @default(false)
  isNew            Boolean    @default(false)
  sorting          Int        @default(0)
  
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  categories       Category[]
  products         Product[]
}

model Category {
  id          String    @id @default(cuid())
  name        String
  slug        String
  description String?
  icon        String?
  sorting     Int       @default(0)
  gameId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  game        Game      @relation(fields: [gameId], references: [id], onDelete: Cascade)
  products    Product[]

  @@unique([slug, gameId])
}
model Product {
  id               String   @id // Gunakan kode unik dari provider, misal: "MLA3-S13"
  name             String   // Nama produk, misal: "3 Diamonds (3 + 0 Bonus)"
  basePrice        Float    // Harga dasar dari provider
  price            Float    // Harga jual
  discountPrice    Float?   // Harga diskon jika ada
  markupPercentage Float    @default(10)
  sorting         Int        @default(0)

  categoryId       String
  gameId           String

  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relasi
  orderItems       OrderItem[]
  category         Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  game             Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
}


model Order {
  id            String       @id @default(cuid())
  orderNumber   String       @unique
  userId        String?
  customerName  String?
  customerEmail String
  customerPhone String?
  status        OrderStatus  @default(PENDING)
  totalAmount   Float
  gameData      Json?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  user          User?        @relation(fields: [userId], references: [id])
  items         OrderItem[]
  payment       Payment?
  transaction   Transaction?
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int     @default(1)
  price     Float
  gameData  Json?
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])
}

model Payment {
  id              String        @id @default(cuid())
  orderId         String        @unique
  amount          Float
  status          PaymentStatus @default(PENDING)
  method          String
  paymentProvider String
  transactionId   String?
  paymentUrl      String?
  paymentCode     String?
  paymentData     Json?
  expiredAt       DateTime?
  paidAt          DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  order           Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Transaction {
  id              String            @id @default(cuid())
  transactionCode String            @unique
  orderId         String?           @unique
  type            TransactionType
  amount          Float
  status          TransactionStatus @default(PENDING)
  providerRef     String?
  providerData    Json?
  responseData    Json?
  gameData        Json?
  failedReason    String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  order           Order?            @relation(fields: [orderId], references: [id])
}

model Banner {
  id          String    @id @default(cuid())
  title       String?
  subtitle    String?
  description String?
  imageUrl    String
  targetUrl   String?
  buttonText  String?
  isActive    Boolean   @default(true)
  startDate   DateTime?
  endDate     DateTime?
  sorting     Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Setting {
  id        String   @id
  value     Json
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  ADMIN
  RESELLER
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
  FAILED
}

enum PaymentStatus {
  PENDING
  SUCCESS
  EXPIRED
  FAILED
  REFUNDED
}

enum TransactionType {
  PURCHASE
  REFUND
}

enum TransactionStatus {
  PENDING
  PROCESSING
  SUCCESS
  FAILED
}
