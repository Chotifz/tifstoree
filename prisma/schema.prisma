generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User (opsional, untuk yang sudah login)
model User {
  id                 String               @id @default(cuid())
  name               String?
  email              String               @unique
  password           String?
  phone              String?
  address            String?
  role               Role                 @default(USER)
  isVerified         Boolean              @default(false)
  emailVerified      DateTime?
  image              String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  orders             Order[]
  accounts           Account[]
  sessions           Session[]
}

// Verification Token (untuk verifikasi email)
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Game (kategori utama)
model Game {
  id               String        @id @default(cuid())
  name             String
  slug             String        @unique
  description      String?       @db.Text
  shortDescription String?
  icon             String?       // Icon kecil, misalnya logo game
  banner           String?       // Gambar banner
  bannerTitle      String?       // Judul di atas banner
  bannerSubtitle   String?       // Subjudul atau tagline
  developerName    String?
  instructionText  String?       @db.Text // Instruksi umum (contoh: masukkan user ID, server, dll)
  requiredFields   Json?         // Field yang perlu diisi user saat checkout (misal: { "userId": "string", "server": "string" })
  isPopular        Boolean       @default(false)
  isFeatured       Boolean       @default(false)
  isNew            Boolean       @default(false)
  sorting          Int           @default(0)
  
  products         Product[]
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
}

// Product (item spesifik yang bisa dibeli)
model Product {
  id                String     @id @default(cuid()) // We'll generate this
  name              String     // Nama produk, misal: "3 Diamonds (3 + 0 Bonus)"
  description       String?    @db.Text
  basePrice         Float      // Harga dasar dari provider
  price             Float      // Harga jual
  discountPrice     Float?     // Harga diskon jika ada
  markupPercentage  Float      @default(10)
  sorting           Int        @default(0)
  stock             Int?       // Null untuk unlimited
  
  gameId            String
  
  // Provider-related fields
  providerCode      String?    // Kode produk dari provider (VIPayment, etc)
  providerGame      String?    // Game code dari provider
  providerServer    String?    // Server dari provider (jika ada)
  providerStatus    String?    // Status dari provider (available, empty, etc)
  providerPrices    Json?      // Raw price data dari provider
  
  // Game-specific fields
  requiredFields    Json?      // ["userId", "serverId", "gameUsername"]
  instructionText   String?    @db.Text // Petunjuk cara mengisi user ID, server, dll
  
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  
  orderItems        OrderItem[]
  game              Game       @relation(fields: [gameId], references: [id], onDelete: Cascade)
}

// Order (pesanan dari user, login atau tidak)
model Order {
  id             String      @id @default(cuid())
  orderNumber    String      @unique
  userId         String?     // Opsional, untuk user yang login
  user           User?       @relation(fields: [userId], references: [id])
  customerName   String?     // Untuk user non-login
  customerEmail  String      // Required untuk semua user
  customerPhone  String?     // Opsional
  status         OrderStatus @default(PENDING)
  totalAmount    Float
  items          OrderItem[]
  payment        Payment?    // Relasi one-to-one
  gameData       Json?       // Data game seperti ID, server, dll
  transaction    Transaction? // Relasi one-to-one
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}

model OrderItem {
  id          String  @id @default(cuid())
  orderId     String
  order       Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId   String
  product     Product @relation(fields: [productId], references: [id])
  quantity    Int     @default(1)
  price       Float
  gameData    Json?   // Data spesifik game (ID, server, dll)
}

model Payment {
  id              String        @id @default(cuid())
  orderId         String        @unique
  order           Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  amount          Float
  status          PaymentStatus @default(PENDING)
  method          String        // "MIDTRANS_VA", "MIDTRANS_EWALLET", dll
  paymentProvider String        // "MIDTRANS", "XENDIT", dll
  transactionId   String?       // ID transaksi dari gateway
  paymentUrl      String?       // URL pembayaran
  paymentCode     String?       // Kode VA/pembayaran
  paymentData     Json?         // Data tambahan dari provider
  expiredAt       DateTime?
  paidAt          DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Transaction {
  id              String             @id @default(cuid())
  transactionCode String             @unique
  orderId         String?            @unique
  order           Order?             @relation(fields: [orderId], references: [id])
  type            TransactionType
  amount          Float
  status          TransactionStatus  @default(PENDING)
  providerRef     String?            // Referensi ID dari provider
  providerData    Json?              // Data dari provider
  responseData    Json?              // Response dari provider
  gameData        Json?              // Data game terkait
  failedReason    String?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
}

model Banner {
  id          String   @id @default(cuid())
  title       String?
  subtitle    String?
  description String?  @db.Text
  imageUrl    String
  targetUrl   String?
  buttonText  String?
  isActive    Boolean  @default(true)
  startDate   DateTime?
  endDate     DateTime?
  sorting     Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// For tracking provider product sync operations
model SyncLog {
  id               String   @id @default(cuid())
  provider         String   // e.g., "vipayment"
  gameId           String
  providerCategory String?  // Game code from provider
  results          Json?    // Results of the sync operation
  status           String   // "success", "failed"
  userId           String?  // Admin who performed the sync
  createdAt        DateTime @default(now())
}

// Settings untuk Website
model Setting {
  id        String   @id
  value     Json
  updatedAt DateTime @updatedAt
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Enums
enum Role {
  USER
  ADMIN
  RESELLER
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
  FAILED
}

enum PaymentStatus {
  PENDING
  SUCCESS
  EXPIRED
  FAILED
  REFUNDED
}

enum TransactionType {
  PURCHASE
  REFUND
}

enum TransactionStatus {
  PENDING
  PROCESSING
  SUCCESS
  FAILED
}